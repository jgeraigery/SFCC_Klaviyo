<isscript>
    var klaviyoUtils = require('*/cartridge/scripts/utils/klaviyo/klaviyoUtils.js');
</isscript>
<iscomment>
    this template should be included near the end of the html body on all pages.
    it calls the Klaviyo JS SDK files into the page, and calls the Klaviyo-Event controller via
    remote include for pages whose controllers are cached OOTB
</iscomment>
<!--- TEMPLATENAME: klaviyoFooter.isml --->
<isif condition="${dw.system.Site.getCurrent().getCustomPreferenceValue('klaviyo_enabled')}">
    <script async src="//static.klaviyo.com/onsite/js/klaviyo.js?company_id=${dw.system.Site.getCurrent().preferences.custom.klaviyo_account}"></script>
    <script src="https://code.jquery.com/jquery-1.11.0.min.js"></script>
    <script>
        // klaviyo object loader - provided by klaviyo
        !function(){if(!window.klaviyo){window._klOnsite=window._klOnsite||[];try{window.klaviyo=new Proxy({},{get:function(n,i){return"push"===i?function(){var n;(n=window._klOnsite).push.apply(n,arguments)}:function(){for(var n=arguments.length,o=new Array(n),w=0;w<n;w++)o[w]=arguments[w];var t="function"==typeof o[o.length-1]?o.pop():void 0,e=new Promise((function(n){window._klOnsite.push([i].concat(o,[function(i){t&&t(i),n(i)}]))}));return e}}})}catch(n){window.klaviyo=window.klaviyo||[],window.klaviyo.push=function(){var n;(n=window._klOnsite).push.apply(n,arguments)}}}}();
    </script>
    <isif condition="${pdict.action == 'Product-Show' || pdict.action == 'Search-Show'}">
        <isif condition="${pdict.action == 'Product-Show'}">
            <isset name="klAction" value="${klaviyoUtils.EVENT_NAMES.viewedProduct}" scope="page" />
            <isset name="klParms" value="${request.httpParameterMap.pid.stringValue}" scope="page" />
        <iselse>
            <isif condition="${request.httpParameterMap.cgid != ''}">
                <isset name="klAction" value="${klaviyoUtils.EVENT_NAMES.viewedCategory}" scope="page" />
                <isset name="klParms" value="${request.httpParameterMap.cgid.stringValue}" scope="page" />
            <iselse>
                <isset name="klAction" value="${klaviyoUtils.EVENT_NAMES.searchedSite}" scope="page" />
                <isset name="klParms" value="${request.httpParameterMap.q.stringValue + '|' + pdict.productSearch.count}" scope="page" />
            </isif>
        </isif>
        <isinclude url="${URLUtils.url('Klaviyo-Event', 'action', klAction, 'parms', klParms)}" />
    </isif>
    <isif condition="${pdict.klid}">
        <isinclude template="klaviyo/klaviyoID" />
    </isif>
    <isif condition="${dw.system.Site.getCurrent().getCustomPreferenceValue('klaviyo_email_selectors')}">
        <script>
            var klaviyoJS = {};
            klaviyoJS.emailFieldSelectors = <isprint value="${JSON.stringify(dw.system.Site.current.preferences.custom.klaviyo_email_selectors)}" encoding="off" />;
            klaviyoJS.sfccEmailRegex = new RegExp(/^[\w.%+-]+@[\w.-]+\.[\w]{2,6}$/);
            klaviyoJS.getExchangeID = function () {
                var klaviyoCookie = document.cookie.split('; ').filter(function(c) {return /__kla_id=/.test(c)});
                return JSON.parse(atob(klaviyoCookie[0].split("__kla_id=")[1])).$exchange_id;
            };
            Promise.resolve(klaviyo.isIdentified()).then((result) => { klaviyoJS.identifiedUser = result });

            window.addEventListener('DOMContentLoaded', (event) => {
                if ("MutationObserver" in window) {
                    let page = document.body;
                    const observer = new MutationObserver(mutations => {
                        klaviyoListeners();
                    });

                    observer.observe(page, {
                        childList: true,
                        subtree: true
                    });
                }
            });

            function klaviyoListeners() {
                for (let i = 0; i < klaviyoJS.emailFieldSelectors.length; i++) {
                    let selectedInput = $(klaviyoJS.emailFieldSelectors[i]);
                    if (selectedInput) {
                        let klavInput = selectedInput[0];
                        if (klavInput && !klavInput.klaviyoListener) {
                            selectedInput.attr("data-listener", 'klaviyo');  // Add this attribute to DOM to visually inspect where email listeners were applied
                            selectedInput.change(function(){
                            if (klavInput.pattern && klavInput.value.match(klavInput.pattern)) {
                                if (!klaviyoJS.identifiedUser) {
                                    if (klaviyoJS.sfccEmailRegex.test (klavInput.value)) {
                                        klaviyo.identify({ '$email' : klavInput.value }).then(() => { klaviyoJS.identifiedUser = true; klaviyoJS.exchangeID = klaviyoJS.getExchangeID(); });
                                    }

                                    if (Number(klavInput.value.replace(/[^a-z0-9]/gi, ''))) {
                                        console.log('CLEANED NUMBER : ', klavInput.value.replace(/[^a-z0-9]/gi, '')); // TODO: debugging only, remove this console.log()
                                        klaviyo.identify({ '$phone_number' : klavInput.value.replace(/[^a-z0-9]/gi, '') }).then(() => { klaviyoJS.identifiedUser = true; klaviyoJS.exchangeID = klaviyoJS.getExchangeID(); });
                                    }
                                }
                            } else {
                                if (!klaviyoJS.identifiedUser) {
                                    if (klaviyoJS.sfccEmailRegex.test (klavInput.value)) {
                                            console.log('REGEX APPLIED. Email is Good: ', klaviyoJS.sfccEmailRegex.test(klavInput.value)); // TODO: debugging only, remove this console.log()
                                            klaviyo.identify({ '$email' : klavInput.value }).then(() => { klaviyoJS.identifiedUser = true; klaviyoJS.exchangeID = klaviyoJS.getExchangeID(); });
                                    }

                                    if (Number(klavInput.value.replace(/[^a-z0-9]/gi, ''))) {
                                            console.log('CLEANED NUMBER : ', klavInput.value.replace(/[^a-z0-9]/gi, '')); // TODO: debugging only, remove this console.log()
                                            klaviyo.identify({ '$phone_number' : klavInput.value.replace(/[^a-z0-9]/gi, '') }).then(() => { klaviyoJS.identifiedUser = true; klaviyoJS.exchangeID = klaviyoJS.getExchangeID(); });
                                    }
                                }
                            }
                            console.log(' >>>> klaviyoJS OBJ AFTER CHANGE >>>> ', klaviyoJS);  // TODO: debugging only, remove this console.log()
                            });
                        }
                    }
                }
            }
            klaviyoListeners();
        </script>

        <iscomment> ====== TODO: All mutation testing code below to be removed after testing is completed ====== </iscomment>
        <script>
            window.addEventListener('DOMContentLoaded', (event) => {
                let btn = document.getElementById("testButton")
                btn.addEventListener('click', function () {
                    // create new elements
                    const div = document.createElement('div');
                    const label = document.createElement('label');
                    const input = document.createElement('input');

                    // set basic styles & attributes necessary for testing needs
                    label.innerHTML ='Enter Phone or Email';
                    div.classList.add('form-group');
                    div.style.width = '50%';
                    label.classList.add('form-control-label');
                    input.classList.add('form-control');
                    input.setAttribute('type', 'text');
                    input.setAttribute('id', 'pop-up-test-input');

                    div.appendChild(label);
                    div.appendChild(input);

                    const box = document.getElementById('klaviyo-pop-up-test-container');
                    box.prepend(div);
                });
            });
        </script>
        <div id="klaviyo-pop-up-test-container" class="card-body">
            <div class="test-pop-up">
                <button id="testButton" class="btn-primary btn">Render Test Input</button>
            </div>
        <div>
    </isif>
</isif>
